const completeBinary = str => (str.length % 8 ? '0'.repeat(8 - (str.length % 8)) + str : str);

console.log(completeBinary('100111110111011110101100'));

const testData = `Test.assertEquals(completeBinary("1100"), "00001100")
Test.assertEquals(completeBinary("1101100"), "01101100")
Test.assertEquals(completeBinary("110010100010"), "0000110010100010")
Test.assertEquals(completeBinary("1001110001111011100101"), "001001110001111011100101")
Test.assertEquals(completeBinary("111101100011001111100111010001001110010101011001000000001101100"), "0111101100011001111100111010001001110010101011001000000001101100")
Test.assertEquals(completeBinary("1100110111000000010000110011001"), "01100110111000000010000110011001")
Test.assertEquals(completeBinary("011001100101100100100001110101110"), "0000000011001100101100100100001110101110")
Test.assertEquals(completeBinary("10000010100000011"), "000000010000010100000011")
Test.assertEquals(completeBinary("0010100101011110000000101010010"), "00010100101011110000000101010010")
Test.assertEquals(completeBinary("1111000010000101010011001110110000"), "0000001111000010000101010011001110110000")
Test.assertEquals(completeBinary("100111110111011110101100"), "100111110111011110101100")
Test.assertEquals(completeBinary("1111011011010101000001010001000011110000001100100001111110111110001100"), "001111011011010101000001010001000011110000001100100001111110111110001100")
Test.assertEquals(completeBinary("000101011101010110000011100011000001001111001001000101111101011"), "0000101011101010110000011100011000001001111001001000101111101011")
Test.assertEquals(completeBinary("01000000011101110001100011101111111011100110011"), "001000000011101110001100011101111111011100110011")
Test.assertEquals(completeBinary("0001001100011100111101000111111011001001111100100000"), "00000001001100011100111101000111111011001001111100100000")
Test.assertEquals(completeBinary("11011111000001001000"), "000011011111000001001000")
Test.assertEquals(completeBinary("111011100010111000"), "000000111011100010111000")
Test.assertEquals(completeBinary("11000011100111000001110100"), "00000011000011100111000001110100")
Test.assertEquals(completeBinary("010001100100001110000001001000000001111111101010010111"), "00010001100100001110000001001000000001111111101010010111")
Test.assertEquals(completeBinary("110101101100010110010000100100110110010010000000101000110101010101100"), "000110101101100010110010000100100110110010010000000101000110101010101100")
Test.assertEquals(completeBinary("1010"), "00001010")
Test.assertEquals(completeBinary("11010010010"), "0000011010010010")
Test.assertEquals(completeBinary("1010010101001010011000110101101101100011100010111101110110"), "0000001010010101001010011000110101101101100011100010111101110110")
Test.assertEquals(completeBinary("10011101001100001"), "000000010011101001100001")
Test.assertEquals(completeBinary("1011001110011101010011101110001000010011011"), "000001011001110011101010011101110001000010011011")
Test.assertEquals(completeBinary("111110101111100011010001111110100001101110101011001110111001"), "0000111110101111100011010001111110100001101110101011001110111001")
Test.assertEquals(completeBinary("000100110001110011011111101101000110010101"), "000000000100110001110011011111101101000110010101")
Test.assertEquals(completeBinary("01101000110000111100110001"), "00000001101000110000111100110001")
Test.assertEquals(completeBinary("110011010"), "0000000110011010")
Test.assertEquals(completeBinary("10100000100"), "0000010100000100")
Test.assertEquals(completeBinary("01110110101101110000111000010100"), "01110110101101110000111000010100")
Test.assertEquals(completeBinary("00111101101110001111010100011000011101111110110000001110"), "00111101101110001111010100011000011101111110110000001110")
Test.assertEquals(completeBinary("1000101011011110110100001010000111100010001111110"), "00000001000101011011110110100001010000111100010001111110")
Test.assertEquals(completeBinary("00110001001110111010111000100101011011100110101010"), "00000000110001001110111010111000100101011011100110101010")
Test.assertEquals(completeBinary("11100110010001110111111000100000011011011110110"), "011100110010001110111111000100000011011011110110")
Test.assertEquals(completeBinary("001111010010101111101001111100010110011001000011101011100101"), "0000001111010010101111101001111100010110011001000011101011100101")
Test.assertEquals(completeBinary("00110001000110011100"), "000000110001000110011100")
Test.assertEquals(completeBinary("10011101101011111101101010"), "00000010011101101011111101101010")
Test.assertEquals(completeBinary("0110000001001010101100111101010100010010"), "0110000001001010101100111101010100010010")
Test.assertEquals(completeBinary("01001111001110010001010111101000"), "01001111001110010001010111101000")
Test.assertEquals(completeBinary("00111000010010110111001111011010001010000111010000011110111"), "0000000111000010010110111001111011010001010000111010000011110111")
Test.assertEquals(completeBinary("1101100011100110101000000010101011100001001001101"), "00000001101100011100110101000000010101011100001001001101")
Test.assertEquals(completeBinary("0101110010100001111"), "000000101110010100001111")
Test.assertEquals(completeBinary("01010"), "00001010")
Test.assertEquals(completeBinary("0110010000001010110111011110101111000011111101000001110"), "00110010000001010110111011110101111000011111101000001110")
Test.assertEquals(completeBinary("10100110110110000101011010111101000111100"), "000000010100110110110000101011010111101000111100")
Test.assertEquals(completeBinary("001101011110011111011010111000001"), "0000000001101011110011111011010111000001")
Test.assertEquals(completeBinary("111000011001101100110010101010110100101"), "0111000011001101100110010101010110100101")
Test.assertEquals(completeBinary("1010000111001010001001011110000110000010"), "1010000111001010001001011110000110000010")
Test.assertEquals(completeBinary("1001100111111001010101110"), "00000001001100111111001010101110")
Test.assertEquals(completeBinary("11101010001011011010001101000001010000000101"), "000011101010001011011010001101000001010000000101")
Test.assertEquals(completeBinary("0101000"), "00101000")
Test.assertEquals(completeBinary("100101000000000001101100001111100"), "0000000100101000000000001101100001111100")

// made by @Joshua Se√±oron`;

// console.log(testData);

const funk = testData.match(/(?<=\().*(?=,)/g);
const ergebnis = testData.match(/(?<=\), ).*(?=\))/g);

// const ergebnis = testData.match(/(?<=\), ").*(?="\)))/g);  mit String

function consolo() {
        return funk.map((x, i) => `const consolo${i + 1} = ${x}`).join('; <br>');
}

function displayErgebnis() {
        return ergebnis.map((x, i) => `const ergebnis${i + 1} = ${x}`).join('; <br>');
}

// console.log(consolo());
// console.log(displayErgebnis());

const resultFunk = consolo();
const resultErgebnis = displayErgebnis();

// Make a div
const div = document.createElement('div');
// add a class of wrapper to it
div.classList.add('wrapper');

// put it into the body
document.body.appendChild(div);

// make an unordered list
const h2Test = `<h2>
  ${funk[0]}
</h2><p>${resultFunk} <br><br> ${resultErgebnis}</p>`;

// add three list items with the words "one, two three" in them
// put that list into the above wrapper
div.innerHTML = h2Test;

function generatePlayerCard(funki, ergebnisse, numm, fun) {
        const farbeTrue = `"${funki.toString()}"` === ergebnisse;

        const html = `
      <div class="playerCard">
        <h2>${funki}</h2>
        <p>${ergebnisse}<p>
        <p>Test ${numm} ist ${farbeTrue}.</p>
        <p>${fun}</p>
        <div><button class="delete" type="button">&times; Delete</button></div>
      </div>
    `;

        return html;
}

const cards = document.createElement('div');
cards.classList.add('cards');

let cardsHTML = [];
for (let i = 0; i < funk.length; i++) {
        cardsHTML += generatePlayerCard(eval(funk[i]), ergebnis[i], i + 1, funk[i]);
}

cards.innerHTML = cardsHTML;
div.insertAdjacentElement('beforebegin', cards);

const buttonsDelete = document.querySelectorAll('.delete');
// make out delete function
function deleteCard(event) {
        const buttonThatGotClicked = event.currentTarget;
        // buttonThatGotClicked.parentElement.remove();
        buttonThatGotClicked.closest('.playerCard').remove();
}

// loop over them and attach a listener
buttonsDelete.forEach(button => button.addEventListener('click', deleteCard));

console.log(document.getElementsByClassName('playerCard'));
